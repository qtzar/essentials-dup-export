package com.qtzar.essentialsexport.controllers;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.qtzar.essentialsexport.clients.EASClient;
import com.qtzar.essentialsexport.configuration.EASRepositoriesProperties;
import com.qtzar.essentialsexport.model.dup.ClassSelection;
import com.qtzar.essentialsexport.model.dup.DUPExportRequest;
import com.qtzar.essentialsexport.model.dup.FieldSelection;
import com.qtzar.essentialsexport.services.DUPExportService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.util.*;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(DUPExportController.class)
class DUPExportControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @MockBean
    private DUPExportService dupExportService;

    @MockBean
    private EASClient easClient;

    @MockBean
    private EASRepositoriesProperties easRepositoriesProperties;

    private DUPExportRequest testRequest;

    @BeforeEach
    void setUp() {
        testRequest = new DUPExportRequest();
        testRequest.setRepoId("test-repo");
        testRequest.setExternalRepositoryName("Test Repository");
        testRequest.setIdPrefix("TST");

        FieldSelection field1 = new FieldSelection("description", true);
        ClassSelection classSelection = new ClassSelection();
        classSelection.setClassName("Business_Capability");
        classSelection.setSelected(true);
        classSelection.setFields(Collections.singletonList(field1));

        testRequest.setClassSelections(Collections.singletonList(classSelection));
    }

    @Test
    void testGenerateExport_Success() throws Exception {
        // Arrange
        byte[] mockDupFile = "mock dup content".getBytes();
        when(dupExportService.generateDUPExport(any(DUPExportRequest.class))).thenReturn(mockDupFile);

        // Act & Assert
        mockMvc.perform(post("/api/dup/export")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(testRequest)))
                .andExpect(status().isOk())
                .andExpect(header().exists("Content-Disposition"))
                .andExpect(header().string("Content-Disposition", "attachment; filename=\"Test_Repository.dup\""))
                .andExpect(content().contentType(MediaType.APPLICATION_OCTET_STREAM))
                .andExpect(content().bytes(mockDupFile));
    }

    @Test
    void testGenerateExport_WithSpecialCharactersInFilename() throws Exception {
        // Arrange
        testRequest.setExternalRepositoryName("Test Repository! @#$%");
        byte[] mockDupFile = "mock dup content".getBytes();
        when(dupExportService.generateDUPExport(any(DUPExportRequest.class))).thenReturn(mockDupFile);

        // Act & Assert
        mockMvc.perform(post("/api/dup/export")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(testRequest)))
                .andExpect(status().isOk())
                .andExpect(header().string("Content-Disposition", "attachment; filename=\"Test_Repository_______.dup\""));
    }

    @Test
    void testGenerateExport_WithNullRepositoryName() throws Exception {
        // Arrange
        testRequest.setExternalRepositoryName(null);
        byte[] mockDupFile = "mock dup content".getBytes();
        when(dupExportService.generateDUPExport(any(DUPExportRequest.class))).thenReturn(mockDupFile);

        // Act & Assert
        mockMvc.perform(post("/api/dup/export")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(testRequest)))
                .andExpect(status().isOk())
                .andExpect(header().string("Content-Disposition", "attachment; filename=\"export.dup\""));
    }

    @Test
    void testGenerateExport_WithBlankRepositoryName() throws Exception {
        // Arrange
        testRequest.setExternalRepositoryName("   ");
        byte[] mockDupFile = "mock dup content".getBytes();
        when(dupExportService.generateDUPExport(any(DUPExportRequest.class))).thenReturn(mockDupFile);

        // Act & Assert
        mockMvc.perform(post("/api/dup/export")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(testRequest)))
                .andExpect(status().isOk())
                .andExpect(header().string("Content-Disposition", "attachment; filename=\"export.dup\""));
    }

    @Test
    void testGenerateExport_ServiceThrowsIOException() throws Exception {
        // Arrange
        when(dupExportService.generateDUPExport(any(DUPExportRequest.class)))
                .thenThrow(new java.io.IOException("Failed to generate DUP"));

        // Act & Assert
        mockMvc.perform(post("/api/dup/export")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(testRequest)))
                .andExpect(status().isInternalServerError());
    }

    @Test
    void testGetRepositories_Success() throws Exception {
        // Arrange
        List<EASRepositoriesProperties.Repository> repositories = new ArrayList<>();
        EASRepositoriesProperties.Repository repo1 = new EASRepositoriesProperties.Repository();
        repo1.setName("Production");
        repo1.setRepoId("prod-repo");

        EASRepositoriesProperties.Repository repo2 = new EASRepositoriesProperties.Repository();
        repo2.setName("Development");
        repo2.setRepoId("dev-repo");

        repositories.add(repo1);
        repositories.add(repo2);

        when(easRepositoriesProperties.getRepositories()).thenReturn(repositories);

        // Act & Assert
        mockMvc.perform(get("/api/dup/repositories"))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$.length()").value(2))
                .andExpect(jsonPath("$[0].name").value("Production"))
                .andExpect(jsonPath("$[0].repoId").value("prod-repo"))
                .andExpect(jsonPath("$[1].name").value("Development"))
                .andExpect(jsonPath("$[1].repoId").value("dev-repo"));
    }

    @Test
    void testGetRepositories_EmptyList() throws Exception {
        // Arrange
        when(easRepositoriesProperties.getRepositories()).thenReturn(Collections.emptyList());

        // Act & Assert
        mockMvc.perform(get("/api/dup/repositories"))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$").isArray())
                .andExpect(jsonPath("$.length()").value(0));
    }

    @Test
    void testGetClasses_Success() throws Exception {
        // Arrange
        Map<String, Object> classMetadata = new HashMap<>();
        Map<String, Object> businessCapability = new HashMap<>();
        businessCapability.put("className", "Business_Capability");
        businessCapability.put("slots", Arrays.asList("name", "description", "owner"));

        classMetadata.put("Business_Capability", businessCapability);

        when(easClient.getClassesMetadata(eq("test-repo"))).thenReturn(classMetadata);

        // Act & Assert
        mockMvc.perform(get("/api/dup/classes")
                .param("repoId", "test-repo"))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.Business_Capability").exists())
                .andExpect(jsonPath("$.Business_Capability.className").value("Business_Capability"))
                .andExpect(jsonPath("$.Business_Capability.slots").isArray())
                .andExpect(jsonPath("$.Business_Capability.slots.length()").value(3));
    }

    @Test
    void testGetClasses_ClientException() throws Exception {
        // Arrange
        when(easClient.getClassesMetadata(eq("test-repo")))
                .thenThrow(new RuntimeException("EAS API Error"));

        // Act & Assert
        mockMvc.perform(get("/api/dup/classes")
                .param("repoId", "test-repo"))
                .andExpect(status().isInternalServerError());
    }

    @Test
    void testGetClasses_MissingRepoIdParameter() throws Exception {
        // Act & Assert
        mockMvc.perform(get("/api/dup/classes"))
                .andExpect(status().isBadRequest());
    }

    @Test
    void testGenerateExport_InvalidJson() throws Exception {
        // Act & Assert
        mockMvc.perform(post("/api/dup/export")
                .contentType(MediaType.APPLICATION_JSON)
                .content("{invalid json"))
                .andExpect(status().isBadRequest());
    }

    @Test
    void testGenerateExport_LargePayload() throws Exception {
        // Arrange - create a request with many classes and fields
        List<ClassSelection> classSelections = new ArrayList<>();
        for (int i = 0; i < 50; i++) {
            List<FieldSelection> fields = new ArrayList<>();
            for (int j = 0; j < 20; j++) {
                fields.add(new FieldSelection("field" + j, true));
            }
            ClassSelection classSelection = new ClassSelection("Class" + i, fields, true);
            classSelections.add(classSelection);
        }

        testRequest.setClassSelections(classSelections);
        byte[] mockDupFile = "large dup content".getBytes();
        when(dupExportService.generateDUPExport(any(DUPExportRequest.class))).thenReturn(mockDupFile);

        // Act & Assert
        mockMvc.perform(post("/api/dup/export")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(testRequest)))
                .andExpect(status().isOk());
    }

    @Test
    void testGenerateExport_EmptyClassSelections() throws Exception {
        // Arrange
        testRequest.setClassSelections(Collections.emptyList());
        byte[] mockDupFile = "empty dup content".getBytes();
        when(dupExportService.generateDUPExport(any(DUPExportRequest.class))).thenReturn(mockDupFile);

        // Act & Assert
        mockMvc.perform(post("/api/dup/export")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(testRequest)))
                .andExpect(status().isOk());
    }

    @Test
    void testGenerateExport_WithoutIdPrefix() throws Exception {
        // Arrange
        testRequest.setIdPrefix(null);
        byte[] mockDupFile = "mock dup content".getBytes();
        when(dupExportService.generateDUPExport(any(DUPExportRequest.class))).thenReturn(mockDupFile);

        // Act & Assert
        mockMvc.perform(post("/api/dup/export")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(testRequest)))
                .andExpect(status().isOk())
                .andExpect(content().bytes(mockDupFile));
    }

    @Test
    void testGetClasses_DifferentRepoIds() throws Exception {
        // Arrange
        Map<String, Object> repo1Metadata = Map.of("Class1", Map.of("className", "Class1"));
        Map<String, Object> repo2Metadata = Map.of("Class2", Map.of("className", "Class2"));

        when(easClient.getClassesMetadata(eq("repo1"))).thenReturn(repo1Metadata);
        when(easClient.getClassesMetadata(eq("repo2"))).thenReturn(repo2Metadata);

        // Act & Assert - repo1
        mockMvc.perform(get("/api/dup/classes")
                .param("repoId", "repo1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.Class1").exists())
                .andExpect(jsonPath("$.Class2").doesNotExist());

        // Act & Assert - repo2
        mockMvc.perform(get("/api/dup/classes")
                .param("repoId", "repo2"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.Class2").exists())
                .andExpect(jsonPath("$.Class1").doesNotExist());
    }
}
