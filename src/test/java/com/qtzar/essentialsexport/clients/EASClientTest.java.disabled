package com.qtzar.essentialsexport.clients;

import com.qtzar.essentialsexport.model.essential.response.BearerTokenResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.MediaType;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.web.client.RestClient;

import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class EASClientTest {

    @Mock
    private RestClient.Builder restClientBuilder;

    @Mock
    private RestClient restClient;

    @Mock
    private RestClient.RequestHeadersUriSpec<?> requestHeadersUriSpec;

    @Mock
    private RestClient.RequestBodyUriSpec requestBodyUriSpec;

    @Mock
    private RestClient.RequestBodySpec requestBodySpec;

    @Mock
    private RestClient.ResponseSpec responseSpec;

    private EASClient easClient;

    @BeforeEach
    void setUp() {
        easClient = new EASClient();

        // Set required fields using reflection
        ReflectionTestUtils.setField(easClient, "endpoint", "https://test.example.com");
        ReflectionTestUtils.setField(easClient, "apiKey", "test-api-key");
        ReflectionTestUtils.setField(easClient, "username", "test@example.com");
        ReflectionTestUtils.setField(easClient, "password", "test-password");
        ReflectionTestUtils.setField(easClient, "easRestClient", restClient);
    }

    @Test
    void testGetClassesMetadata_Success() {
        // Arrange
        String repoId = "test-repo";
        Object expectedResponse = Map.of("classes", List.of("Class1", "Class2"));

        setupAuthMocks("test-token", 60, 1440);

        when(restClient.get()).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.uri(anyString())).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.header(eq("Authorization"), anyString())).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.header(eq("x-api-key"), anyString())).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.body(Object.class)).thenReturn(expectedResponse);

        // Act
        Object result = easClient.getClassesMetadata(repoId);

        // Assert
        assertNotNull(result);
        assertEquals(expectedResponse, result);
        verify(restClient).get();
        verify(requestHeadersUriSpec).uri(contains(repoId));
    }

    @Test
    void testGetAllInstancesAsMap_Success() {
        // Arrange
        String repoId = "test-repo";
        String instanceType = "TestClass";
        int depthCount = 1;
        String slotValues = "id^name^description";

        Map<String, Object> instance1 = Map.of("id", "inst1", "name", "Instance 1");
        Map<String, Object> instance2 = Map.of("id", "inst2", "name", "Instance 2");
        Map<String, Object> pageResponse = Map.of(
            "instances", List.of(instance1, instance2),
            "next_page", null
        );

        setupAuthMocks("test-token", 60, 1440);

        when(restClient.get()).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.uri(anyString())).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.header(eq("Authorization"), anyString())).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.header(eq("x-api-key"), anyString())).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.body(any(ParameterizedTypeReference.class))).thenReturn(pageResponse);

        // Act
        List<Map<String, Object>> result = easClient.getAllInstancesAsMap(repoId, instanceType, depthCount, slotValues);

        // Assert
        assertNotNull(result);
        assertEquals(2, result.size());
        assertEquals("inst1", result.get(0).get("id"));
        assertEquals("inst2", result.get(1).get("id"));
        verify(restClient).get();
    }

    @Test
    void testGetAllInstancesAsMap_WithPagination() {
        // Arrange
        String repoId = "test-repo";
        String instanceType = "TestClass";
        int depthCount = 1;
        String slotValues = "id^name";

        Map<String, Object> instance1 = Map.of("id", "inst1", "name", "Instance 1");
        Map<String, Object> instance2 = Map.of("id", "inst2", "name", "Instance 2");

        Map<String, Object> page1Response = Map.of(
            "instances", List.of(instance1),
            "next_page", "start=1,count=100"
        );

        Map<String, Object> page2Response = Map.of(
            "instances", List.of(instance2),
            "next_page", null
        );

        setupAuthMocks("test-token", 60, 1440);

        when(restClient.get()).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.uri(anyString())).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.header(eq("Authorization"), anyString())).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.header(eq("x-api-key"), anyString())).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.body(any(ParameterizedTypeReference.class)))
            .thenReturn(page1Response)
            .thenReturn(page2Response);

        // Act
        List<Map<String, Object>> result = easClient.getAllInstancesAsMap(repoId, instanceType, depthCount, slotValues);

        // Assert
        assertNotNull(result);
        assertEquals(2, result.size());
        assertEquals("inst1", result.get(0).get("id"));
        assertEquals("inst2", result.get(1).get("id"));
        verify(restClient, times(2)).get();
    }

    @Test
    void testGetAllInstancesAsMap_WithoutSlots() {
        // Arrange
        String repoId = "test-repo";
        String instanceType = "TestClass";
        int depthCount = 1;

        Map<String, Object> instance = Map.of("id", "inst1", "name", "Instance 1");
        Map<String, Object> pageResponse = Map.of(
            "instances", List.of(instance),
            "next_page", null
        );

        setupAuthMocks("test-token", 60, 1440);

        when(restClient.get()).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.uri(anyString())).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.header(eq("Authorization"), anyString())).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.header(eq("x-api-key"), anyString())).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.body(any(ParameterizedTypeReference.class))).thenReturn(pageResponse);

        // Act
        List<Map<String, Object>> result = easClient.getAllInstancesAsMap(repoId, instanceType, depthCount, null);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.size());

        // Verify URL doesn't contain slots parameter
        ArgumentCaptor<String> uriCaptor = ArgumentCaptor.forClass(String.class);
        verify(requestHeadersUriSpec).uri(uriCaptor.capture());
        assertFalse(uriCaptor.getValue().contains("slots="));
    }

    @Test
    void testGetAllInstancesAsMap_EmptyResponse() {
        // Arrange
        String repoId = "test-repo";
        String instanceType = "TestClass";
        int depthCount = 1;
        String slotValues = "id^name";

        Map<String, Object> emptyResponse = Map.of();

        setupAuthMocks("test-token", 60, 1440);

        when(restClient.get()).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.uri(anyString())).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.header(eq("Authorization"), anyString())).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.header(eq("x-api-key"), anyString())).thenReturn(requestHeadersUriSpec);
        when(requestHeadersUriSpec.retrieve()).thenReturn(responseSpec);
        when(responseSpec.body(any(ParameterizedTypeReference.class))).thenReturn(emptyResponse);

        // Act
        List<Map<String, Object>> result = easClient.getAllInstancesAsMap(repoId, instanceType, depthCount, slotValues);

        // Assert
        assertNotNull(result);
        assertTrue(result.isEmpty());
    }

    private void setupAuthMocks(String token, int expiresInMinutes, int refreshExpiresInMinutes) {
        // Set auth token to simulate already authenticated state
        ReflectionTestUtils.setField(easClient, "authToken", "Bearer " + token);
        ReflectionTestUtils.setField(easClient, "authExpires", Instant.now().plus(expiresInMinutes, ChronoUnit.MINUTES));
        ReflectionTestUtils.setField(easClient, "refreshToken", "refresh-token");
        ReflectionTestUtils.setField(easClient, "refreshExpires", Instant.now().plus(refreshExpiresInMinutes, ChronoUnit.MINUTES));
    }
}
