package com.qtzar.essentialsexport.integration;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.qtzar.essentialsexport.clients.EASClient;
import com.qtzar.essentialsexport.configuration.EASRepositoriesProperties;
import com.qtzar.essentialsexport.model.dup.ClassSelection;
import com.qtzar.essentialsexport.model.dup.DUPExportRequest;
import com.qtzar.essentialsexport.model.dup.FieldSelection;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;

import java.util.*;

import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

/**
 * Integration tests for the entire DUP export flow.
 * Tests the complete request-to-response cycle.
 */
@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
class DUPExportIntegrationTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @MockBean
    private EASClient easClient;

    @MockBean
    private EASRepositoriesProperties easRepositoriesProperties;

    @BeforeEach
    void setUp() {
        // Setup repository properties
        List<EASRepositoriesProperties.Repository> repositories = new ArrayList<>();
        EASRepositoriesProperties.Repository repo = new EASRepositoriesProperties.Repository();
        repo.setName("Test Repository");
        repo.setRepoId("test-repo");
        repositories.add(repo);

        when(easRepositoriesProperties.getRepositories()).thenReturn(repositories);
    }

    @Test
    void testEndToEndDUPExportFlow() throws Exception {
        // Step 1: Get list of repositories
        mockMvc.perform(get("/api/dup/repositories"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].name").value("Test Repository"))
                .andExpect(jsonPath("$[0].repoId").value("test-repo"));

        // Step 2: Get class metadata for a repository
        Map<String, Object> classMetadata = new HashMap<>();
        Map<String, Object> businessCapability = new HashMap<>();
        businessCapability.put("className", "Business_Capability");
        businessCapability.put("slots", Arrays.asList("name", "description", "owner"));
        classMetadata.put("Business_Capability", businessCapability);

        when(easClient.getClassesMetadata(eq("test-repo"))).thenReturn(classMetadata);

        mockMvc.perform(get("/api/dup/classes")
                .param("repoId", "test-repo"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.Business_Capability").exists());

        // Step 3: Generate DUP export
        Map<String, Object> instance1 = new HashMap<>();
        instance1.put("id", "inst1");
        instance1.put("name", "Capability 1");
        instance1.put("className", "Business_Capability");
        instance1.put("description", "Test description");
        instance1.put("owner", "owner1");

        when(easClient.getAllInstancesAsMap(anyString(), anyString(), anyInt(), anyString()))
                .thenReturn(Collections.singletonList(instance1));

        DUPExportRequest request = new DUPExportRequest();
        request.setRepoId("test-repo");
        request.setExternalRepositoryName("Export Test");
        request.setIdPrefix("EXP");

        FieldSelection field = new FieldSelection("description", true);
        ClassSelection classSelection = new ClassSelection();
        classSelection.setClassName("Business_Capability");
        classSelection.setSelected(true);
        classSelection.setFields(Collections.singletonList(field));
        request.setClassSelections(Collections.singletonList(classSelection));

        mockMvc.perform(post("/api/dup/export")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isOk())
                .andExpect(header().exists("Content-Disposition"))
                .andExpect(content().contentType(MediaType.APPLICATION_OCTET_STREAM));
    }

    @Test
    void testMultipleClassesExport() throws Exception {
        // Arrange
        Map<String, Object> capability = new HashMap<>();
        capability.put("id", "cap1");
        capability.put("name", "Capability 1");
        capability.put("className", "Business_Capability");
        capability.put("description", "Test");

        Map<String, Object> service = new HashMap<>();
        service.put("id", "svc1");
        service.put("name", "Service 1");
        service.put("className", "Application_Service");
        service.put("description", "Test");

        when(easClient.getAllInstancesAsMap(eq("test-repo"), eq("Business_Capability"), anyInt(), anyString()))
                .thenReturn(Collections.singletonList(capability));
        when(easClient.getAllInstancesAsMap(eq("test-repo"), eq("Application_Service"), anyInt(), anyString()))
                .thenReturn(Collections.singletonList(service));

        DUPExportRequest request = new DUPExportRequest();
        request.setRepoId("test-repo");
        request.setExternalRepositoryName("Multi Class Export");
        request.setIdPrefix("MC");

        ClassSelection class1 = new ClassSelection();
        class1.setClassName("Business_Capability");
        class1.setSelected(true);
        class1.setFields(Collections.singletonList(new FieldSelection("description", true)));

        ClassSelection class2 = new ClassSelection();
        class2.setClassName("Application_Service");
        class2.setSelected(true);
        class2.setFields(Collections.singletonList(new FieldSelection("description", true)));

        request.setClassSelections(Arrays.asList(class1, class2));

        // Act & Assert
        mockMvc.perform(post("/api/dup/export")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isOk())
                .andExpect(header().string("Content-Disposition", "attachment; filename=\"Multi_Class_Export.dup\""));
    }

    @Test
    void testExportWithComplexDataStructures() throws Exception {
        // Arrange - create instance with nested objects and lists
        Map<String, Object> refObject1 = Map.of("id", "ref1", "name", "Reference 1");
        Map<String, Object> refObject2 = Map.of("id", "ref2", "name", "Reference 2");

        Map<String, Object> instance = new HashMap<>();
        instance.put("id", "complex1");
        instance.put("name", "Complex Instance");
        instance.put("className", "Business_Capability");
        instance.put("description", "Complex test");
        instance.put("related_capabilities", Arrays.asList(refObject1, refObject2));
        instance.put("tags", Arrays.asList("tag1", "tag2", "tag3"));

        when(easClient.getAllInstancesAsMap(anyString(), anyString(), anyInt(), anyString()))
                .thenReturn(Collections.singletonList(instance));

        DUPExportRequest request = new DUPExportRequest();
        request.setRepoId("test-repo");
        request.setExternalRepositoryName("Complex Export");
        request.setIdPrefix("CX");

        ClassSelection classSelection = new ClassSelection();
        classSelection.setClassName("Business_Capability");
        classSelection.setSelected(true);
        classSelection.setFields(Arrays.asList(
                new FieldSelection("description", true),
                new FieldSelection("related_capabilities", true),
                new FieldSelection("tags", true)
        ));
        request.setClassSelections(Collections.singletonList(classSelection));

        // Act & Assert
        mockMvc.perform(post("/api/dup/export")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_OCTET_STREAM));
    }

    @Test
    void testExportWithIdTransformation() throws Exception {
        // Arrange - mix of prefixed and unprefixed IDs
        Map<String, Object> instance1 = new HashMap<>();
        instance1.put("id", "PRE_1");
        instance1.put("name", "Existing Prefix");
        instance1.put("className", "Business_Capability");

        Map<String, Object> instance2 = new HashMap<>();
        instance2.put("id", "random_id");
        instance2.put("name", "No Prefix");
        instance2.put("className", "Business_Capability");

        when(easClient.getAllInstancesAsMap(anyString(), anyString(), anyInt(), anyString()))
                .thenReturn(Arrays.asList(instance1, instance2));

        DUPExportRequest request = new DUPExportRequest();
        request.setRepoId("test-repo");
        request.setExternalRepositoryName("ID Transform Test");
        request.setIdPrefix("PRE");

        ClassSelection classSelection = new ClassSelection();
        classSelection.setClassName("Business_Capability");
        classSelection.setSelected(true);
        classSelection.setFields(Collections.singletonList(new FieldSelection("name", true)));
        request.setClassSelections(Collections.singletonList(classSelection));

        // Act & Assert
        mockMvc.perform(post("/api/dup/export")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isOk());
    }

    @Test
    void testExportWithNoInstances() throws Exception {
        // Arrange
        when(easClient.getAllInstancesAsMap(anyString(), anyString(), anyInt(), anyString()))
                .thenReturn(Collections.emptyList());

        DUPExportRequest request = new DUPExportRequest();
        request.setRepoId("test-repo");
        request.setExternalRepositoryName("Empty Export");
        request.setIdPrefix("EMP");

        ClassSelection classSelection = new ClassSelection();
        classSelection.setClassName("Business_Capability");
        classSelection.setSelected(true);
        classSelection.setFields(Collections.singletonList(new FieldSelection("description", true)));
        request.setClassSelections(Collections.singletonList(classSelection));

        // Act & Assert
        mockMvc.perform(post("/api/dup/export")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_OCTET_STREAM));
    }

    @Test
    void testConcurrentExportRequests() throws Exception {
        // Arrange
        Map<String, Object> instance = new HashMap<>();
        instance.put("id", "inst1");
        instance.put("name", "Instance 1");
        instance.put("className", "Business_Capability");
        instance.put("description", "Test");

        when(easClient.getAllInstancesAsMap(anyString(), anyString(), anyInt(), anyString()))
                .thenReturn(Collections.singletonList(instance));

        DUPExportRequest request1 = createTestRequest("Export1", "EX1");
        DUPExportRequest request2 = createTestRequest("Export2", "EX2");

        // Act & Assert - simulate concurrent requests
        mockMvc.perform(post("/api/dup/export")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request1)))
                .andExpect(status().isOk())
                .andExpect(header().string("Content-Disposition", "attachment; filename=\"Export1.dup\""));

        mockMvc.perform(post("/api/dup/export")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request2)))
                .andExpect(status().isOk())
                .andExpect(header().string("Content-Disposition", "attachment; filename=\"Export2.dup\""));
    }

    @Test
    void testExportWithEASClientFailure() throws Exception {
        // Arrange
        when(easClient.getAllInstancesAsMap(anyString(), anyString(), anyInt(), anyString()))
                .thenThrow(new RuntimeException("EAS connection failed"));

        DUPExportRequest request = createTestRequest("Failed Export", "FAIL");

        // Act & Assert - should handle gracefully and still return a DUP file
        mockMvc.perform(post("/api/dup/export")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
                .andExpect(status().isOk());
    }

    @Test
    void testGetClassesWithMultipleRepositories() throws Exception {
        // Arrange
        Map<String, Object> repo1Classes = Map.of(
                "Business_Capability", Map.of("className", "Business_Capability")
        );
        Map<String, Object> repo2Classes = Map.of(
                "Application_Service", Map.of("className", "Application_Service")
        );

        when(easClient.getClassesMetadata(eq("repo1"))).thenReturn(repo1Classes);
        when(easClient.getClassesMetadata(eq("repo2"))).thenReturn(repo2Classes);

        // Act & Assert
        mockMvc.perform(get("/api/dup/classes").param("repoId", "repo1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.Business_Capability").exists())
                .andExpect(jsonPath("$.Application_Service").doesNotExist());

        mockMvc.perform(get("/api/dup/classes").param("repoId", "repo2"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.Application_Service").exists())
                .andExpect(jsonPath("$.Business_Capability").doesNotExist());
    }

    private DUPExportRequest createTestRequest(String repoName, String prefix) {
        DUPExportRequest request = new DUPExportRequest();
        request.setRepoId("test-repo");
        request.setExternalRepositoryName(repoName);
        request.setIdPrefix(prefix);

        ClassSelection classSelection = new ClassSelection();
        classSelection.setClassName("Business_Capability");
        classSelection.setSelected(true);
        classSelection.setFields(Collections.singletonList(new FieldSelection("description", true)));
        request.setClassSelections(Collections.singletonList(classSelection));

        return request;
    }
}
